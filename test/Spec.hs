--
-- {-# LANGUAGE GeneralizedNewtypeDeriving #-}
--
-- import Control.Exception (Exception, catch, throw)
-- import Control.Monad.Trans.Maybe
-- import Data.Maybe
-- import Lib
-- import System.Console.ANSI
-- -- import Control.Monad.Trans.State
-- import Control.Monad.Identity
-- import Control.Monad.State
--
--
-- newtype FakeUI a = FakeUI (State ([Direction], ) a)
--   deriving (Functor, Applicative, Monad, MonadState [Direction])
--
-- evalFakeUI :: FakeUI a -> [Direction] -> a
-- evalFakeUI (FakeUI st) = evalState st
--
-- instance GameUI FakeUI where
--   -- nextEvent :: ui Direction
--   nextEvent = do
--     (dir : tail) <- get
--     put tail
--     return dir
--   -- movePlayer :: Position -> Position -> ui ()
--   movePlayer _ _ = return ()
--   -- finish :: ui ()
--   finish = return ()
--   -- killPlayer :: ui ()
--   killCharacter = return ()
--
-- fieldExample =
--   " #      \n\
--   \   ###  \n\
--   \   # x  \n\
--   \  ###   \n\
--   \        "
--
-- fieldNotRect =
--   "    #   \n\
--   \   ### \n\
--   \   # x  \n\
--   \  ###   \n\
--   \        "
--
-- fieldWoExit =
--   "    #   \n\
--   \   ###  \n\
--   \   #    \n\
--   \  ###   \n\
--   \        "
--
-- fieldTwoExits =
--   "    #  x\n\
--   \   ###  \n\
--   \   # x  \n\
--   \  ###   \n\
--   \        "
--
-- testsField =  [ isJust    (toField fieldExample)
--               , isNothing (toField fieldNotRect)
--               , isNothing (toField fieldWoExit)
--               , isNothing (toField fieldTwoExits)
--               ]
--
--
-- stateExample :: GameState
-- stateExample = GameState (0, 0) (fromJust $ toField fieldExample)
--
-- -- testsMove = [ isNothing (run $ move West)
-- --             , isNothing (run $ move North)
-- --             , inPos (run $ move East) (0, 0)
-- --             , inPos (run $ move South) (1, 0)
-- --             , inPos (run to11) (1, 1)
-- --             ]
-- --   where
-- --     run game = runIdentity (runMaybeT (execStateT game stateExample))
-- --     inPos mbState pos = case mbState of
-- --         Just (GameState p field) -> p == pos
-- --         Nothing -> False
-- --     to11 = do
-- --       move South
-- --       move East
--
-- foo = evalFakeUI (evalGameT playGame stateExample) [North]
--
-- testsMove = [
--             ]
--
-- -- =================================================================
--
-- data Skipped = Skipped
-- instance Show Skipped where
--   show Skipped = "skipped"
-- instance Exception Skipped where
--
-- (??) = throw Skipped
--
-- printColored color msg = do
--   setSGR [SetColor Foreground Vivid color]
--   putStrLn msg
--   setSGR [Reset]
--
-- testAll :: IO ()
-- testAll = do
--     putStrLn ""
--     mapM_ (uncurry runTests) tests
--   where
--     tests = [ ("field", testsField)
--             -- , ("move", testsMove)
--             ]
--
--     runTests :: String -> [Bool] -> IO ()
--     runTests n ts = do
--       putStr $ "Running tests " ++ show n ++ "... "
--       uncurry printColored $
--         if and ts then
--           (Green, "OK")
--         else
--           (Red, "FAIL")
--       `catch` \e -> case e of
--         Skipped -> printColored Yellow $ show e
--
-- main :: IO ()
-- main = testAll

main = print ""
